# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'win_test_condition.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from nodeeditor.utils import dumpException

traitCounter = 0;

class Ui_TestCond(object):
    def __init__(self,questions):
        super().__init__()
        self.func=questions


    def setupUi(self, Dialog):
        self.window = Dialog
        Dialog.setObjectName("Dialog")
        Dialog.resize(703, 487)
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(0, 10, 701, 471))
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(50, 20, 47, 13))
        self.label.setObjectName("label")

        self.testCond_test_text = QtWidgets.QLineEdit(self.widget)
        self.testCond_test_text.setGeometry(QtCore.QRect(110, 20, 113, 20))
        self.testCond_test_text.setObjectName("testCond_test_text")

        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(120, 70, 47, 16))
        self.label_2.setObjectName("label_2")

        self.testCond_between_min = QtWidgets.QSpinBox(self.widget)
        self.testCond_between_min.setGeometry(QtCore.QRect(180, 70, 42, 22))
        self.testCond_between_min.setObjectName("testCond_between_min")

        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(240, 70, 47, 13))
        self.label_3.setObjectName("label_3")

        self.testCond_between_max = QtWidgets.QSpinBox(self.widget)
        self.testCond_between_max.setGeometry(QtCore.QRect(270, 70, 42, 22))
        self.testCond_between_max.setObjectName("testCond_between_max")

        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(100, 110, 47, 13))
        self.label_4.setObjectName("label_4")

        self.testCond_bool_positive = QtWidgets.QRadioButton(self.widget)
        self.testCond_bool_positive.setGeometry(QtCore.QRect(130, 160, 82, 17))
        self.testCond_bool_positive.setObjectName("testCond_bool_positive")

        self.testCond_bool_false = QtWidgets.QRadioButton(self.widget)
        self.testCond_bool_false.setGeometry(QtCore.QRect(210, 160, 82, 17))
        self.testCond_bool_false.setObjectName("testCond_bool_false")

        self.testCond_discard = QtWidgets.QPushButton(self.widget)
        self.testCond_discard.setGeometry(QtCore.QRect(170, 370, 101, 61))
        self.testCond_discard.setObjectName("testCond_discard")
        self.testCond_discard.clicked.connect(self.exit_window)

        self.testCond_save = QtWidgets.QPushButton(self.widget)
        self.testCond_save.setGeometry(QtCore.QRect(40, 370, 101, 61))
        self.testCond_save.setObjectName("testCond_save")
        self.testCond_save.clicked.connect(self.save_condition)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "test for"))
        self.label_2.setText(_translate("Dialog", "between"))
        self.label_3.setText(_translate("Dialog", "and"))
        self.label_4.setText(_translate("Dialog", "or"))
        self.testCond_bool_positive.setText(_translate("Dialog", "positive"))
        self.testCond_bool_false.setText(_translate("Dialog", "negative"))
        self.testCond_discard.setText(_translate("Dialog", "Discard"))
        self.testCond_save.setText(_translate("Dialog", "Save"))

    def save_condition(self):
        try:
            global traitCounter
            testCounter+=1
            if self.testCond_bool_positive.isChecked() or self.testCond_bool_false.isChecked():
                q={"title": "test condition "+str(testCounter), "test":self.testCond_test_text.text(),"positive": self.testCond_bool_positive.isChecked(),"negative": self.testCond_bool_false.isChecked()}
            else:
                q={"title" :"test condition "+str(testCounter),
                    "test": self.testCond_test_text.text(),
                    "min" : self.testCond_between_min.value() ,
                   "max": self.testCond_between_max.value()}

            self.func(q)
            self.exit_window()
        except Exception as e : dumpException(e)

    def exit_window(self):
        self.window.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_TestCond()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
