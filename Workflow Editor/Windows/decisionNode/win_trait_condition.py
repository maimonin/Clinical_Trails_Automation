# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'win_trait_condition.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from nodeeditor.utils import dumpException
from conditions import *
traitCounter = 0;

class Ui_TraitCond(object):

    def __init__(self,questions):
        super().__init__()
        self.func=questions


    def setupUi(self, Dialog):
        self.window = Dialog
        Dialog.setObjectName("Dialog")
        Dialog.resize(717, 502)
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(0, 0, 691, 481))
        self.widget.setObjectName("widget")

        self.traitCondition_age_check = QtWidgets.QCheckBox(self.widget)
        self.traitCondition_age_check.setGeometry(QtCore.QRect(130, 80, 51, 31))
        self.traitCondition_age_check.setObjectName("traitCondition_age_check")

        self.between_lbl = QtWidgets.QLabel(self.widget)
        self.between_lbl.setGeometry(QtCore.QRect(190, 90, 70, 13))
        self.between_lbl.setObjectName("label")
        self.and_lbl = QtWidgets.QLabel(self.widget)
        self.and_lbl.setGeometry(QtCore.QRect(340, 90, 47, 13))
        self.and_lbl.setObjectName("label_2")

        self.traitCondition_sex_check = QtWidgets.QCheckBox(self.widget)
        self.traitCondition_sex_check.setGeometry(QtCore.QRect(130, 170, 51, 21))
        self.traitCondition_sex_check.setObjectName("traitCondition_sex_check")

        self.traitCondition_sex_male = QtWidgets.QRadioButton(self.widget)
        self.traitCondition_sex_male.setGeometry(QtCore.QRect(200, 170, 82, 17))
        self.traitCondition_sex_male.setObjectName("traitCondition_sex_male")

        self.traitCondition_sex_female = QtWidgets.QRadioButton(self.widget)
        self.traitCondition_sex_female.setGeometry(QtCore.QRect(280, 170, 82, 17))
        self.traitCondition_sex_female.setObjectName("traitCondition_sex_female")

        self.traitCondition_save = QtWidgets.QPushButton(self.widget)
        self.traitCondition_save.setGeometry(QtCore.QRect(60, 410, 101, 61))
        self.traitCondition_save.setObjectName("traitCondition_save")
        self.traitCondition_save.clicked.connect(self.save_condition)

        self.traitCondition_discard = QtWidgets.QPushButton(self.widget)
        self.traitCondition_discard.setGeometry(QtCore.QRect(190, 410, 101, 61))
        self.traitCondition_discard.setObjectName("traitCondition_discard")
        self.traitCondition_discard.clicked.connect(self.exit_window)

        self.traitCondition_between_min = QtWidgets.QSpinBox(self.widget)
        self.traitCondition_between_min.setGeometry(QtCore.QRect(280, 90, 42, 22))
        self.traitCondition_between_min.setObjectName("traitCondition_between_min")

        self.traitCondition_between_max = QtWidgets.QSpinBox(self.widget)
        self.traitCondition_between_max.setGeometry(QtCore.QRect(380, 90, 42, 22))
        self.traitCondition_between_max.setObjectName("traitCondition_between_max")

        self.traitCondition_custom_text = QtWidgets.QLineEdit(self.widget)
        self.traitCondition_custom_text.setGeometry(QtCore.QRect(180, 220, 113, 20))
        self.traitCondition_custom_text.setObjectName("traitCondition_custom_text")

        self.custom_lbl = QtWidgets.QLabel(self.widget)
        self.custom_lbl.setGeometry(QtCore.QRect(100, 220, 70, 13))
        self.custom_lbl.setObjectName("label_3")

        self.traitCondition_customRadio_positive = QtWidgets.QRadioButton(self.widget)
        self.traitCondition_customRadio_positive.setGeometry(QtCore.QRect(140, 270, 82, 17))
        self.traitCondition_customRadio_positive.setObjectName("traitCondition_customRadio_positive")

        self.traitCondition_customRadio_negative = QtWidgets.QRadioButton(self.widget)
        self.traitCondition_customRadio_negative.setGeometry(QtCore.QRect(220, 270, 82, 17))
        self.traitCondition_customRadio_negative.setObjectName("traitCondition_customRadio_negative")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.traitCondition_age_check.setText(_translate("Dialog", "age"))
        self.between_lbl.setText(_translate("Dialog", "Between"))
        self.and_lbl.setText(_translate("Dialog", "and"))
        self.traitCondition_sex_check.setText(_translate("Dialog", "sex"))
        self.traitCondition_sex_male.setText(_translate("Dialog", "Male"))
        self.traitCondition_sex_female.setText(_translate("Dialog", "Female"))
        self.traitCondition_save.setText(_translate("Dialog", "Save"))
        self.traitCondition_discard.setText(_translate("Dialog", "Discard"))
        self.custom_lbl.setText(_translate("Dialog", "custom"))
        self.traitCondition_customRadio_positive.setText(_translate("Dialog", "positive"))
        self.traitCondition_customRadio_negative.setText(_translate("Dialog", "negative"))

    def save_condition(self):
        try:
            global traitCounter
            traitCounter+=1
            q={"title": "trait condition " + str(traitCounter),
               "type" : "trait condition ",
               }
            if self.traitCondition_sex_check.isChecked():
                q["test"]="gender"
                q["satisfy"] = create_satisfy_one_choice("male" if self.traitCondition_sex_male.isChecked() else "female")
            elif self.traitCondition_age_check.isChecked():
                q["test"]="age"
                q["satisfy"] = create_satisfy_range(self.traitCondition_between_min.value(),self.traitCondition_between_max.value())
            elif(self.traitCondition_custom_text.text()!=""):
                q["test"] = self.traitCondition_custom_text.text()
                q["satisfy"] = create_satisfy_one_choice("positive" if self.traitCondition_customRadio_positive.isChecked() else "negative")

            else:
                #TODO notify user this is not ok
                return
            # TODO: add support for custom
            self.func(q)
            self.exit_window()
        except Exception as e : dumpException(e)

    def exit_window(self):
        self.window.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_TraitCond(lambda x:x)
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
